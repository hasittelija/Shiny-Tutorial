keijo
keijo$pate[1,] <- 5
dataframeofbets$Wagered <- NA
dataframeofbets
m <- nrow(dataframeofbets)
for (i in 1:m) {
dataframeofbets[i,]$Wagered <- getWagered(dataframeofbets[i,1],dataframeofbets[i,2])
}
dataframeofbets
AddPayout <- function(dataframeofbets) {
m <- nrow(dataframeofbets)
dataframeofbets$Payout <- NA
for (i in 1:m) {
dataframeofbets[i,]$Payout <- getWagered(dataframeofbets[i,1],dataframeofbets[i,2])
}
dataframeofbets
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
dataframeofbets
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
dataframeofbets
dataframeofbets <- AddPayout(dataframeofbets)
dataframeofbets
dataframeofbets
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
dataframeofbets
dataframeofbets <- alkusetup()
dataframeofbets
betsit <- c(150,120,-110,-105)
voluumit <- c(100,50,100,70)
datf <- data.frame(betsit,voluumit)
datf
datf <- AddWagered(datf)
datf
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
dataframeofbets
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
dataframeofbets
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
dataframeofbets
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
dataframeofbets
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
dataframeofbets
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
dataframeofbets
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
dataframeofbets
colSums(dataframeofbets)
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
dataframeofbets
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
dataframeofbets
colSums(dataframeofbets)
colSums(dataframeofbets[dataframeofbets$ChosenSide == 0,])
colSums(dataframeofbets[dataframeofbets$ChosenSide == 1,])
dataframeofbets
subsetframe <- dataframeofbets[1:2,]
subsetframe
m <- 2
subset0 <- dataframeofbets[dataframeofbets$ChosenSide ==0,]
subset1 <- dataframeofbets[dataframeofbets$ChosenSide ==1,]
subset0
subset1
subset0 <- dataframeofbets[subsetframe$ChosenSide ==0,]
subset1 <- dataframeofbets[subsetframe$ChosenSide ==1,]
subset0
subset1
subsetframe
subset0 <- subsetframe[subsetframe$ChosenSide ==0,]
subset1 <- subsetframe[subsetframe$ChosenSide ==1,]
subset0
subset1
subset0$Payout
homepayout <- sum(subset0$Payout)
homepayout
awaypayout <- sum(subset1$Payout)
totalwagered <- sum(subsetframe$Wagered)
awaypayout
zeroEVLine <- zeroEVtest(homepayout,awaypayout,totalwagered)
zeroEVLine
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
dataframeofbets
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
dataframeofbets
debugSource('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
debugSource('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
dataframeofbets
debugSource('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
dataframeofbets
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
dataframeofbets
dataframeofbets <- AddCombined(dataframeofbets)
dataframeofbets
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
dataframeofbets
dataframeofbets <- AddCombined(dataframeofbets)
dataframeofbets
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
1350/500
620/420
Any2US(2.7)
Any2US(1.47619)
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
dataframeofbets
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
debugSource('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
source('~/jee/rdocs2/R docs/R docs/tools/PayoutWageredVolume.R')
source('~/jee/rdocs2/R docs/R docs/tools/OddsConverters.R')
dataframeofbets
source('~/jee/rdocs2/R docs/R docs/tools/OddsConverters.R')
exit
logout
quit
quit()
ls()
2^16
2^2^2
2^2^2^2
2^2^2^2^2
sessionInfo()
1/6 + 1/2 + 1/2.4
library(leaps)
install.packages("leaps")
help(regfit.full)
require(leaps)
help(regfit.full)
regfit.full
help(leaps)
library(caret)
install.packages("caret")
library(caret)
data(mtcars)
set.seed(31212)
trainIndex <- createDataPartition(mtcars$mpg, p = 0.7, list = FALSE)
training <- mtcars[trainIndex,]
testing <- mtcars[-trainIndex,]
require(leaps)
regfit.full <-regsubsets(mpg ~ ., data = training)
summary(regfit.full)
regtif.tull
regfit.full
amFit <- lm(mpg ~ am + wt + qsec, data = mtcars)
summary(amFit)
help(mtcars)
help(regsubsets)
regfit.full <-regsubsets(mpg ~ am, data = training)
regfit.full <-regsubsets(mpg ~ am + ., data = training)
regfit.full
summary(regfit.full)
plot(regfit.full)
regfit.full <-regsubsets(mpg ~ ., force.in = am, data = training)
colnames(mtcars)
which(colnames(mtcars) == "am")
regfit.full <-regsubsets(mpg ~ ., force.in = 9, data = training)
summary(regfit.full)
head(mtcars)
head(mtcars[,8])
regfit.full <-regsubsets(mpg ~ ., force.in = 8, data = training)
summary(regfit.full)
regfit.full <-regsubsets(mpg ~ ., force.in = 8, data = training, method = "forward")
summary(regfit.full)
plot(regfit.full)
toberemoved <- c(toberemoved,names(which.min(abs(summary(allFit)[[4]][,3]))))
toberemoved <- NULL
# grab all t-values, and then choose lowest in absolute value, this should be the one variable that had
# least effect
toberemoved <- c(toberemoved,names(which.min(abs(summary(allFit)[[4]][,3]))))
library(caret)
data(mtcars)
set.seed(31212)
trainIndex <- createDataPartition(mtcars$mpg, p = 0.7, list = FALSE)
training <- mtcars[trainIndex,]
testing <- mtcars[-trainIndex,]
mtcars <- training
head(mtcars)
pairs(mtcars, panel = panel.smooth, main = "mtcars", col = 3 + (mtcars$am))
abs(cor(mtcars)["am",]) < 0.3
abs(cor(mtcars)) < 0.3
set.seed(123)
require(ggplot2)
require(reshape)
require(scales)
# Compare 3 bettors who all have 3% ROI, first customer bets only 10% dogs,
# second customer bets 50% coinflips and last customer 90% favorites.
# Each customer has sample size of 1000 bets
# Real probability of lines for the simulation
lineprob <- c("10% dog" = 0.1, "coinflip" = 0.5, "90% fav" = 0.9)
# Customer ROI, (same thing as holdrisk), 0.03 means 3%, defined as Winloss/RiskAmount (instead of Volume)
ROI <- 0.03
# Assume customer wagers 1 dollar per line, so samplesize also equals to total amount wagered
# Note that customer is risking 1 unit, so when betting favorites the volume is smaller
samplesize <- 1000
number_of_simulations <- 50000
# Line odds in decimal odds
decimal_odds <- (1+ROI)/lineprob
# simulate the game results (won/loss)
flips <- sapply(lineprob, function(x) rbinom(number_of_simulations, samplesize, x))
# Now bookie sees these results and tries to figure out the real probabilities
# of the games and customers holdrisk/hold
# sampling distribution for the mean of real probabilities
simulatedlineprob <- flips/samplesize
# length of the confidence intervals for the probabilities of the game
apply(simulatedlineprob, 2, function(x) quantile(x, 0.975) - quantile(x, 0.025))
# in terms of absolute probabilities, the confidence interval for the coinflip
# game probabilities is the widest. The width for the 10% dog and 90% fav game
# probabilities has to be equal because of symmetry
# confidence interval end points for the probabilities of the game
cbind("2.5%" = c(apply(simulatedlineprob, 2, function (x) quantile(x, 0.025))), "mean" = apply(simulatedlineprob, 2, mean), "97.5%" = c(apply(simulatedlineprob, 2, function (x) quantile(x, 0.975))))
melted_simulatedlineprob <- melt(simulatedlineprob)
colnames(melted_simulatedlineprob)[2] <- "Customer"
ggplot(melted_simulatedlineprob, aes(value, fill = Customer)) + geom_density(alpha = 0.2) +
ggtitle("Histogram of maximum likehood estimates for win probabilities") + xlab("Win probability") +
scale_x_continuous(label = percent)
# customers total profits = number of bets won * decimal odds - total amount wagered
simulatedwinloss <- t(t(flips)*decimal_odds) - samplesize
#apply(simulatedwinloss, 2, sd)
# length of the confidence intervals for winloss amount
apply(simulatedwinloss, 2, function(x) quantile(x, 0.975) - quantile(x, 0.025))
# Confidence intervals for winloss amount
cbind("2.5%" = c(apply(simulatedwinloss, 2, function (x) quantile(x, 0.025))), "mean" = apply(simulatedwinloss, 2, mean), "97.5%" = c(apply(simulatedwinloss, 2, function (x) quantile(x, 0.975))))
melted_simulatedwinloss <- melt(simulatedwinloss)
colnames(melted_simulatedwinloss)[2] <- "Customer"
ggplot(melted_simulatedwinloss, aes(value, fill = Customer)) + geom_density(alpha = 0.2) +
ggtitle("Histogram of customer winloss amounts") + xlab("Customer winloss") +
scale_x_continuous(label = dollar)
# holdrisk is just winloss/total amount wagered
simulatedholdrisk <- simulatedwinloss/(samplesize)
#apply(simulatedholdrisk, 2, mean)
#apply(simulatedholdrisk, 2, sd)
# Mean and confidence interval for holdrisk
cbind("2.5%" = c(apply(simulatedholdrisk, 2, function (x) quantile(x, 0.025))), "mean" = apply(simulatedholdrisk, 2, mean), "97.5%" = c(apply(simulatedholdrisk, 2, function (x) quantile(x, 0.975))))
melted_simulatedholdrisk <- melt(simulatedholdrisk)
colnames(melted_simulatedholdrisk)[2] <- "Customer"
ggplot(melted_simulatedholdrisk, aes(value, fill = Customer)) + geom_density(alpha = 0.2) +
ggtitle("Histogram of calculated hold risks") + xlab("Customer hold risk percentage") +
scale_x_continuous(label = percent)
# Note that the confidence interval for 10% dog game probabilities was narrower than
# the interval for coinflip games. But here when looking at the customer holdrisk's
# intervals, the interval for 10% dog bettor is wider than for the coinflip bettor
# Comparing the 10% dog and 90% favorite bettor, even tho we had same confidence
# interval for the game probabilities, the hold risk probabilities for these two
# customers are totally different
# These are explained by the fact that customer's holdrisk is calculated by
# ROI = 1 - decimal_odds * lineprob. When betting 10% dogs the decimal_odds are
# roughly 10, so even a small change in lineprobability will change the ROI
# pretty big, because we're multiplying the line probability by decimal_odds.
# Compare this to the guy betting 90% favorites, his decimal_odds
# are ~ 1.11, so in fact his ROI is capped by 11% even if he was betting
# fixed games.
# hold
simulatedhold <- simulatedwinloss/(samplesize)
# for hold, we have multiply the 90% fav holdrisks by 10, because risk is 1 but volume only 0.1
simulatedhold[,3] <- simulatedhold[,3]*10
#apply(simulatedhold, 2, mean)
#apply(simulatedhold, 2, sd)
# Mean and confidence interval for hold, note that
cbind("2.5%" = c(apply(simulatedhold, 2, function (x) quantile(x, 0.025))), "mean" = apply(simulatedhold, 2, mean), "97.5%" = c(apply(simulatedhold, 2, function (x) quantile(x, 0.975))))
melted_simulatedhold <- melt(simulatedhold)
colnames(melted_simulatedhold)[2] <- "Customer"
ggplot(melted_simulatedhold, aes(value, fill = Customer)) + geom_density(alpha = 0.2) +
ggtitle("Histogram of calculated holds") + xlab("Customer hold percentage") +
scale_x_continuous(label = percent)
# distance between 95% quantile and 5% quantile is the width of our confidence interval
# Because decimal_odds = ROI / lineprob, this means that  ROI = decimal_odds * lineprob.
# Take derivatives with respect lineprob -> delta ROI = decimal_odds.
# Basically the bigger decimal_odds are, the more leverage in his ROI customer gets when
# lineprobability changes.
set.seed(123)
require(ggplot2)
require(reshape)
install.packages(reshape)
install.packages("reshape")
require(reshape)
require(scales)
# Compare 3 bettors who all have 3% ROI, first customer bets only 10% dogs,
# second customer bets 50% coinflips and last customer 90% favorites.
# Each customer has sample size of 1000 bets
# Real probability of lines for the simulation
lineprob <- c("10% dog" = 0.1, "coinflip" = 0.5, "90% fav" = 0.9)
# Customer ROI, (same thing as holdrisk), 0.03 means 3%, defined as Winloss/RiskAmount (instead of Volume)
ROI <- 0.03
# Assume customer wagers 1 dollar per line, so samplesize also equals to total amount wagered
# Note that customer is risking 1 unit, so when betting favorites the volume is smaller
samplesize <- 1000
number_of_simulations <- 50000
# Line odds in decimal odds
decimal_odds <- (1+ROI)/lineprob
# simulate the game results (won/loss)
flips <- sapply(lineprob, function(x) rbinom(number_of_simulations, samplesize, x))
# Now bookie sees these results and tries to figure out the real probabilities
# of the games and customers holdrisk/hold
# sampling distribution for the mean of real probabilities
simulatedlineprob <- flips/samplesize
# length of the confidence intervals for the probabilities of the game
apply(simulatedlineprob, 2, function(x) quantile(x, 0.975) - quantile(x, 0.025))
# in terms of absolute probabilities, the confidence interval for the coinflip
# game probabilities is the widest. The width for the 10% dog and 90% fav game
# probabilities has to be equal because of symmetry
# confidence interval end points for the probabilities of the game
cbind("2.5%" = c(apply(simulatedlineprob, 2, function (x) quantile(x, 0.025))), "mean" = apply(simulatedlineprob, 2, mean), "97.5%" = c(apply(simulatedlineprob, 2, function (x) quantile(x, 0.975))))
melted_simulatedlineprob <- melt(simulatedlineprob)
colnames(melted_simulatedlineprob)[2] <- "Customer"
ggplot(melted_simulatedlineprob, aes(value, fill = Customer)) + geom_density(alpha = 0.2) +
ggtitle("Histogram of maximum likehood estimates for win probabilities") + xlab("Win probability") +
scale_x_continuous(label = percent)
# customers total profits = number of bets won * decimal odds - total amount wagered
simulatedwinloss <- t(t(flips)*decimal_odds) - samplesize
#apply(simulatedwinloss, 2, sd)
# length of the confidence intervals for winloss amount
apply(simulatedwinloss, 2, function(x) quantile(x, 0.975) - quantile(x, 0.025))
# Confidence intervals for winloss amount
cbind("2.5%" = c(apply(simulatedwinloss, 2, function (x) quantile(x, 0.025))), "mean" = apply(simulatedwinloss, 2, mean), "97.5%" = c(apply(simulatedwinloss, 2, function (x) quantile(x, 0.975))))
melted_simulatedwinloss <- melt(simulatedwinloss)
colnames(melted_simulatedwinloss)[2] <- "Customer"
ggplot(melted_simulatedwinloss, aes(value, fill = Customer)) + geom_density(alpha = 0.2) +
ggtitle("Histogram of customer winloss amounts") + xlab("Customer winloss") +
scale_x_continuous(label = dollar)
# holdrisk is just winloss/total amount wagered
simulatedholdrisk <- simulatedwinloss/(samplesize)
#apply(simulatedholdrisk, 2, mean)
#apply(simulatedholdrisk, 2, sd)
# Mean and confidence interval for holdrisk
cbind("2.5%" = c(apply(simulatedholdrisk, 2, function (x) quantile(x, 0.025))), "mean" = apply(simulatedholdrisk, 2, mean), "97.5%" = c(apply(simulatedholdrisk, 2, function (x) quantile(x, 0.975))))
melted_simulatedholdrisk <- melt(simulatedholdrisk)
colnames(melted_simulatedholdrisk)[2] <- "Customer"
ggplot(melted_simulatedholdrisk, aes(value, fill = Customer)) + geom_density(alpha = 0.2) +
ggtitle("Histogram of calculated hold risks") + xlab("Customer hold risk percentage") +
scale_x_continuous(label = percent)
# http://pastebin.com/Pz9G5s8k
set.seed(123)
require(ggplot2)
require(reshape)
require(scales)
# Compare 3 bettors who all have 3% ROI, first customer bets only 10% dogs,
# second customer bets 50% coinflips and last customer 90% favorites.
# Each customer has sample size of 1000 bets
# Real probability of lines for the simulation
lineprob <- c("10% dog" = 0.1, "coinflip" = 0.5, "90% fav" = 0.9)
# Customer ROI, (same thing as holdrisk), 0.03 means 3%, defined as Winloss/RiskAmount (instead of Volume)
ROI <- 0.03
# Assume customer wagers 1 dollar per line, so samplesize also equals to total amount wagered
# Note that customer is risking 1 unit, so when betting favorites the volume is smaller
samplesize <- 500
number_of_simulations <- 50000
# Line odds in decimal odds
decimal_odds <- (1+ROI)/lineprob
# simulate the game results (won/loss)
flips <- sapply(lineprob, function(x) rbinom(number_of_simulations, samplesize, x))
# Now bookie sees these results and tries to figure out the real probabilities
# of the games and customers holdrisk/hold
# sampling distribution for the mean of real probabilities
simulatedlineprob <- flips/samplesize
# length of the confidence intervals for the probabilities of the game
apply(simulatedlineprob, 2, function(x) quantile(x, 0.975) - quantile(x, 0.025))
# in terms of absolute probabilities, the confidence interval for the coinflip
# game probabilities is the widest. The width for the 10% dog and 90% fav game
# probabilities has to be equal because of symmetry
# confidence interval end points for the probabilities of the game
cbind("2.5%" = c(apply(simulatedlineprob, 2, function (x) quantile(x, 0.025))), "mean" = apply(simulatedlineprob, 2, mean), "97.5%" = c(apply(simulatedlineprob, 2, function (x) quantile(x, 0.975))))
melted_simulatedlineprob <- melt(simulatedlineprob)
colnames(melted_simulatedlineprob)[2] <- "Customer"
ggplot(melted_simulatedlineprob, aes(value, fill = Customer)) + geom_density(alpha = 0.2) +
ggtitle("Histogram of maximum likehood estimates for win probabilities") + xlab("Win probability") +
scale_x_continuous(label = percent)
# customers total profits = number of bets won * decimal odds - total amount wagered
simulatedwinloss <- t(t(flips)*decimal_odds) - samplesize
#apply(simulatedwinloss, 2, sd)
# length of the confidence intervals for winloss amount
apply(simulatedwinloss, 2, function(x) quantile(x, 0.975) - quantile(x, 0.025))
# Confidence intervals for winloss amount
cbind("2.5%" = c(apply(simulatedwinloss, 2, function (x) quantile(x, 0.025))), "mean" = apply(simulatedwinloss, 2, mean), "97.5%" = c(apply(simulatedwinloss, 2, function (x) quantile(x, 0.975))))
melted_simulatedwinloss <- melt(simulatedwinloss)
colnames(melted_simulatedwinloss)[2] <- "Customer"
ggplot(melted_simulatedwinloss, aes(value, fill = Customer)) + geom_density(alpha = 0.2) +
ggtitle("Histogram of customer winloss amounts") + xlab("Customer winloss") +
scale_x_continuous(label = dollar)
# holdrisk is just winloss/total amount wagered
simulatedholdrisk <- simulatedwinloss/(samplesize)
#apply(simulatedholdrisk, 2, mean)
#apply(simulatedholdrisk, 2, sd)
# Mean and confidence interval for holdrisk
cbind("2.5%" = c(apply(simulatedholdrisk, 2, function (x) quantile(x, 0.025))), "mean" = apply(simulatedholdrisk, 2, mean), "97.5%" = c(apply(simulatedholdrisk, 2, function (x) quantile(x, 0.975))))
melted_simulatedholdrisk <- melt(simulatedholdrisk)
colnames(melted_simulatedholdrisk)[2] <- "Customer"
ggplot(melted_simulatedholdrisk, aes(value, fill = Customer)) + geom_density(alpha = 0.2) +
ggtitle("Histogram of calculated hold risks") + xlab("Customer hold risk percentage") +
scale_x_continuous(label = percent)
# http://pastebin.com/Pz9G5s8k
set.seed(123)
require(ggplot2)
require(reshape)
require(scales)
# Compare 3 bettors who all have 3% ROI, first customer bets only 10% dogs,
# second customer bets 50% coinflips and last customer 90% favorites.
# Each customer has sample size of 1000 bets
# Real probability of lines for the simulation
lineprob <- c("10% dog" = 0.1, "coinflip" = 0.5, "90% fav" = 0.9)
# Customer ROI, (same thing as holdrisk), 0.03 means 3%, defined as Winloss/RiskAmount (instead of Volume)
ROI <- 0.03
# Assume customer wagers 1 dollar per line, so samplesize also equals to total amount wagered
# Note that customer is risking 1 unit, so when betting favorites the volume is smaller
samplesize <- 1000
number_of_simulations <- 50000
# Line odds in decimal odds
decimal_odds <- (1+ROI)/lineprob
# simulate the game results (won/loss)
flips <- sapply(lineprob, function(x) rbinom(number_of_simulations, samplesize, x))
# Now bookie sees these results and tries to figure out the real probabilities
# of the games and customers holdrisk/hold
# sampling distribution for the mean of real probabilities
simulatedlineprob <- flips/samplesize
# length of the confidence intervals for the probabilities of the game
apply(simulatedlineprob, 2, function(x) quantile(x, 0.975) - quantile(x, 0.025))
# in terms of absolute probabilities, the confidence interval for the coinflip
# game probabilities is the widest. The width for the 10% dog and 90% fav game
# probabilities has to be equal because of symmetry
# confidence interval end points for the probabilities of the game
cbind("2.5%" = c(apply(simulatedlineprob, 2, function (x) quantile(x, 0.025))), "mean" = apply(simulatedlineprob, 2, mean), "97.5%" = c(apply(simulatedlineprob, 2, function (x) quantile(x, 0.975))))
melted_simulatedlineprob <- melt(simulatedlineprob)
colnames(melted_simulatedlineprob)[2] <- "Customer"
ggplot(melted_simulatedlineprob, aes(value, fill = Customer)) + geom_density(alpha = 0.2) +
ggtitle("Histogram of maximum likehood estimates for win probabilities") + xlab("Win probability") +
scale_x_continuous(label = percent)
# customers total profits = number of bets won * decimal odds - total amount wagered
simulatedwinloss <- t(t(flips)*decimal_odds) - samplesize
#apply(simulatedwinloss, 2, sd)
# length of the confidence intervals for winloss amount
apply(simulatedwinloss, 2, function(x) quantile(x, 0.975) - quantile(x, 0.025))
# Confidence intervals for winloss amount
cbind("2.5%" = c(apply(simulatedwinloss, 2, function (x) quantile(x, 0.025))), "mean" = apply(simulatedwinloss, 2, mean), "97.5%" = c(apply(simulatedwinloss, 2, function (x) quantile(x, 0.975))))
melted_simulatedwinloss <- melt(simulatedwinloss)
colnames(melted_simulatedwinloss)[2] <- "Customer"
ggplot(melted_simulatedwinloss, aes(value, fill = Customer)) + geom_density(alpha = 0.2) +
ggtitle("Histogram of customer winloss amounts") + xlab("Customer winloss") +
scale_x_continuous(label = dollar)
# holdrisk is just winloss/total amount wagered
simulatedholdrisk <- simulatedwinloss/(samplesize)
#apply(simulatedholdrisk, 2, mean)
#apply(simulatedholdrisk, 2, sd)
# Mean and confidence interval for holdrisk
cbind("2.5%" = c(apply(simulatedholdrisk, 2, function (x) quantile(x, 0.025))), "mean" = apply(simulatedholdrisk, 2, mean), "97.5%" = c(apply(simulatedholdrisk, 2, function (x) quantile(x, 0.975))))
melted_simulatedholdrisk <- melt(simulatedholdrisk)
colnames(melted_simulatedholdrisk)[2] <- "Customer"
ggplot(melted_simulatedholdrisk, aes(value, fill = Customer)) + geom_density(alpha = 0.2) +
ggtitle("Histogram of calculated hold risks") + xlab("Customer hold risk percentage") +
scale_x_continuous(label = percent)
# Note that the confidence interval for 10% dog game probabilities was narrower than
# the interval for coinflip games. But here when looking at the customer holdrisk's
# intervals, the interval for 10% dog bettor is wider than for the coinflip bettor
# Comparing the 10% dog and 90% favorite bettor, even tho we had same confidence
# interval for the game probabilities, the hold risk probabilities for these two
# customers are totally different
# These are explained by the fact that customer's holdrisk is calculated by
# ROI = 1 - decimal_odds * lineprob. When betting 10% dogs the decimal_odds are
# roughly 10, so even a small change in lineprobability will change the ROI
# pretty big, because we're multiplying the line probability by decimal_odds.
# Compare this to the guy betting 90% favorites, his decimal_odds
# are ~ 1.11, so in fact his ROI is capped by 11% even if he was betting
# fixed games.
# hold
simulatedhold <- simulatedwinloss/(samplesize)
# for hold, we have multiply the 90% fav holdrisks by 10, because risk is 1 but volume only 0.1
simulatedhold[,3] <- simulatedhold[,3]*10
#apply(simulatedhold, 2, mean)
#apply(simulatedhold, 2, sd)
# Mean and confidence interval for hold, note that
cbind("2.5%" = c(apply(simulatedhold, 2, function (x) quantile(x, 0.025))), "mean" = apply(simulatedhold, 2, mean), "97.5%" = c(apply(simulatedhold, 2, function (x) quantile(x, 0.975))))
melted_simulatedhold <- melt(simulatedhold)
colnames(melted_simulatedhold)[2] <- "Customer"
ggplot(melted_simulatedhold, aes(value, fill = Customer)) + geom_density(alpha = 0.2) +
ggtitle("Histogram of calculated holds") + xlab("Customer hold percentage") +
scale_x_continuous(label = percent)
e^0
exp(0)
exp(-1.68)
exp(0.1066)
a <- exp(-1.86)
a
b <- exp(0.1066)
b
a+b
a*b
exp(-1.86 + 0.1066)
library(shiny)
runExample("01_hello")
setwd("C:/Users/Tommi/Documents/datasciencecoursera/Developing_Data_Products/Week1/ShinyApp")
dir()
file.rename("server.r", "server.R")
setwd("C:/Users/Tommi/Documents/ShinyTutorial")
runExample("01_hello")
dir
dir()
dir.create("App-1")
setwd("App-1/")
dir()
runExample("01_hello")
file.create("server.R")
file.create("ui.R")
runExample("01_hello")
dir()
setwdI
setwd("..")
dir()
runApp("App-1")
runApp("App-1")
runApp("App-1", display.mode = "showcase")
